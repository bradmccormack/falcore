{"name":"Falcore","tagline":"Modular HTTP server framework for Go","body":"# Falcore\r\n\r\nFalcore is a framework for constructing high performance, modular HTTP servers in Golang.\r\n\r\n[GoPkgDoc](http://gopkgdoc.appspot.com/pkg/github.com/fitstar/falcore) hosts code documentation for this project.\r\n\r\n## Features\r\n* Modular and flexible design\r\n* Hot restart hooks for zero-downtime deploys\r\n* Builtin statistics framework\r\n* Builtin logging framework\r\n\r\n## Design\r\n\r\nFalcore is a filter pipeline based HTTP server library.  You can build arbitrarily complicated HTTP services by chaining just a few simple components:\r\n\t\r\n* `RequestFilters` are the core component.  A request filter takes a request and returns a response or nil.  Request filters an modify the request as it passes through.\r\n* `ResponseFilters` can modify a response on its way out the door.  An example response filter, `compression_filter`, is included.  It applies `deflate` or `gzip` compression to the response if the request supplies the proper headers.\r\n* `Pipelines` form one of the two logic components.  A pipeline contains a list of `RequestFilters` and a list of `ResponseFilters`.  A request is processed through the request filters, in order, until one returns a response.  It then passes the response through each of the response filters, in order.  A pipeline is a valid `RequestFilter`.\r\n* `Routers` allow you to conditionally follow different pipelines.  A router chooses from a set of pipelines.  A few basic routers are included, including routing by hostname or requested path.  You can implement your own router by implementing `falcore.Router`.  `Routers` are not `RequestFilters`, but they can be put into pipelines.\r\n\r\n## Usage\r\n\r\nInstall with `go get github.com/fitstar/falcore`.\r\n\r\nSee the `examples` directory for usage examples.\r\n\r\n## HTTPS\r\n\r\nTo use falcore to serve HTTPS, simply call `ListenAndServeTLS` instead of `ListenAndServe`.  If you want to host SSL and nonSSL out of the same process, simply create two instances of `falcore.Server`.  You can give them the same pipeline or share pipeline components.\r\n\r\n## Building\r\n\r\nFalcore is currently targeted at Go 1.0.  If you're still using Go r.60.x, you can get the last working version of falcore for r.60 using the tag `last_r60`.\r\n\r\n## Maintainers\r\n\r\n* [Dave Grijalva](http://www.github.com/dgrijalva)\r\n* [Scott White](http://www.github.com/smw1218)\r\n\r\n## Contributors\r\n\r\n* [Graham Anderson](http://www.github.com/gnanderson)\r\n* [Amir Mohammad Saied](http://github.com/amir)\r\n* [James Wynn](https://github.com/jameswynn)\r\n* [Jonathan Rudenberg](https://github.com/titanous)\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}